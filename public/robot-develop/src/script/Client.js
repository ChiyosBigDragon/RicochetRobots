/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/robot/Client.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/robot/Client.ts":
/*!*****************************!*\
  !*** ./src/robot/Client.ts ***!
  \*****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _DrawBoard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DrawBoard */ \"./src/robot/DrawBoard.ts\");\n/* harmony import */ var _DrawCommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DrawCommand */ \"./src/robot/DrawCommand.ts\");\n/* harmony import */ var _DrawScore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DrawScore */ \"./src/robot/DrawScore.ts\");\n/* harmony import */ var _Server__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Server */ \"./src/robot/Server.ts\");\n/* harmony import */ var firebase__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! firebase */ \"firebase\");\n/* harmony import */ var firebase__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(firebase__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\nconst db = firebase__WEBPACK_IMPORTED_MODULE_4__[\"database\"]();\nconst PATH = 'RicochetRobots/';\nconst ROBOT_NUM = 4;\nconst ROBOT_COLOR = ['#ff1744', '#2ecc71', '#3498db', '#FFB900'];\nconst randomName = (min = 4, max = 6) => {\n    const range = max - min + 1;\n    const n = min + Math.floor(Math.random() * range);\n    let name = \"\";\n    const lb = 0x3042, ub = 0x3093;\n    const span = ub - lb + 1;\n    for (let i = 0; i < n; ++i) {\n        name += String.fromCodePoint(lb + Math.floor(Math.random() * span));\n    }\n    return name;\n};\n(async () => {\n    const userName = (() => {\n        const cookieName = document.cookie.replace(/(?:(?:^|.*;\\s*)name\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\");\n        let userName = window.prompt(\"User Name?\", cookieName);\n        if (userName == \"\" || userName == null) {\n            userName = randomName(4, 6);\n        }\n        document.cookie = `name=${userName}`;\n        return userName;\n    })();\n    await firebase__WEBPACK_IMPORTED_MODULE_4__[\"auth\"]().signInAnonymously().catch((error) => {\n        console.log(`[error] Cannot SignIn Anonymouse (${error.code} : ${error.message})`);\n    });\n    let uid;\n    await firebase__WEBPACK_IMPORTED_MODULE_4__[\"auth\"]().onAuthStateChanged((user) => {\n        if (user) {\n            uid = user.uid;\n        }\n    });\n    // init\n    db.ref(PATH + 'score/' + uid).set({ name: userName, pt: 0 });\n    db.ref(PATH + 'mode/' + uid).set('vote');\n    db.ref(PATH + 'vote/' + uid).set({});\n    // init\n    const server = new _Server__WEBPACK_IMPORTED_MODULE_3__[\"Server\"](uid, userName);\n    const boardContainer = document.getElementById(\"board-container\");\n    const board = new _DrawBoard__WEBPACK_IMPORTED_MODULE_0__[\"DrawBoard\"](ROBOT_NUM, ROBOT_COLOR, 16, 16, boardContainer);\n    const commandContainer = document.getElementById(\"command-container\");\n    const command = new _DrawCommand__WEBPACK_IMPORTED_MODULE_1__[\"DrawCommand\"](ROBOT_NUM, ROBOT_COLOR, uid, userName, server, commandContainer);\n    const score = new _DrawScore__WEBPACK_IMPORTED_MODULE_2__[\"DrawScore\"](server);\n    const announceContainer = document.getElementById(\"announce-container\");\n    // reset\n    if (document.getElementById('button-user-reset') != null) {\n        document.getElementById('button-user-reset').onclick = () => {\n            server.voteReset();\n            db.ref(PATH + 'mode/').set({});\n            db.ref(PATH + 'score/').set({});\n            db.ref(PATH + 'announce/').set(\"投票受付中\");\n        };\n        document.getElementById('button-score-reset').onclick = () => {\n            server.voteReset();\n            db.ref(PATH + 'score/').once('value', (res) => {\n                const obj = res.val();\n                for (const key in obj) {\n                    obj[key].pt = 0;\n                }\n                db.ref(PATH + 'score/').set(obj);\n            });\n            db.ref(PATH + 'announce/').set(\"投票受付中\");\n        };\n        document.getElementById('button-vote-reset').onclick = () => {\n            server.voteReset();\n            db.ref(PATH + 'announce/').set(\"投票受付中\");\n        };\n        document.getElementById('button-goal-change').onclick = () => {\n            server.goalChange();\n            db.ref(PATH + 'announce/').set(\"投票受付中\");\n        };\n    }\n    // reset\n    db.ref(PATH + 'wall').on('value', (res) => {\n        board.wall(res.val().x, res.val().y);\n        server.wall(res.val().x, res.val().y);\n    });\n    db.ref(PATH + 'robot').on('value', (res) => {\n        board.robot(res.val());\n    });\n    db.ref(PATH + 'select').on('value', (res) => {\n        board.select(res.val());\n        command.select(res.val());\n    });\n    db.ref(PATH + 'step').on('value', (res) => {\n        board.step(res.val());\n    });\n    db.ref(PATH + 'mode/' + uid).on('value', (res) => {\n        command.mode(res.val());\n    });\n    db.ref(PATH + 'announce/').on('value', (res) => {\n        announceContainer.innerText = res.val();\n    });\n})();\n\n\n//# sourceURL=webpack:///./src/robot/Client.ts?");

/***/ }),

/***/ "./src/robot/CreateGoal.ts":
/*!*********************************!*\
  !*** ./src/robot/CreateGoal.ts ***!
  \*********************************/
/*! exports provided: CreateGoal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CreateGoal\", function() { return CreateGoal; });\nclass CreateGoal {\n    constructor(WIDTH, HEIGHT, stage) {\n        this.WIDTH = WIDTH;\n        this.HEIGHT = HEIGHT;\n        this.stage = stage;\n        this.setHeight = (HEIGHT) => {\n            const ratio = HEIGHT / this.layer.getHeight();\n            this.layer.scale(ratio, ratio, this.WIDTH / 2, this.HEIGHT / 2);\n        };\n        this.setPosition = (x, y) => {\n            this.layer.setPosition(x * this.WIDTH, y * this.HEIGHT);\n        };\n        this.changeColor = (id, color) => {\n            this.textLayer.text(String(id + 1));\n            this.backLayer.fill(color);\n        };\n        this.zIndex = (z) => {\n            this.layer.zIndex(z);\n        };\n        this.layer = stage.layer();\n        // 背景\n        this.backLayer = this.layer.rect(-180, -80, 360, 360);\n        // ロボット本体\n        this.robotLayer = this.layer.layer();\n        const colorLayer = this.robotLayer.layer();\n        const bb = colorLayer.layer();\n        bb.attr(\"stroke-width\", \"14.4\");\n        bb.ellipse(0, 41, 91, 84).fill(\"white\").attr(\"stroke\", \"#FFF\");\n        bb.rect(-91, 20, 182, 182).round(22).fill(\"white\").attr(\"stroke\", \"#FFF\");\n        const aa = colorLayer.layer();\n        aa.attr(\"stroke-width\", \"7.2\");\n        aa.rect(14, -86, 13, 86).attr(\"transform\", \"rotate(29)\").round(6.5).fill(\"white\").attr(\"stroke\", \"#FFF\");\n        aa.rect(-143, 41, 48, 133).round(24).fill(\"white\").attr(\"stroke\", \"#FFF\");\n        aa.rect(-58, 138, 48, 133).round(24).fill(\"white\").attr(\"stroke\", \"#FFF\");\n        aa.scale(-1, 1);\n        const a = colorLayer.layer();\n        a.attr(\"stroke-width\", \"7.2\");\n        a.rect(14, -86, 13, 86).attr(\"transform\", \"rotate(29)\").round(6.5).fill(\"white\").attr(\"stroke\", \"#FFF\");\n        a.rect(-143, 41, 48, 133).round(24).fill(\"white\").attr(\"stroke\", \"#FFF\");\n        a.rect(-58, 138, 48, 133).round(24).fill(\"white\").attr(\"stroke\", \"#FFF\");\n        const b = colorLayer.layer();\n        b.attr(\"stroke-width\", \"0.0\");\n        b.ellipse(0, 41, 91, 84).fill(\"white\").attr(\"stroke\", \"#FFF\");\n        b.rect(-91, 20, 182, 182).round(22).fill(\"white\").attr(\"stroke\", \"#FFF\");\n        const c = colorLayer.layer();\n        c.attr(\"stroke-width\", \"7.2\");\n        c.path().attr(\"d\", \"m-95 44.5h190\").attr(\"stroke\", \"#FFF\");\n        c.circle(-42, 0, 4).attr(\"stroke\", \"#FFF\");\n        c.circle(42, 0, 4).attr(\"stroke\", \"#FFF\");\n        // ID\n        this.textLayer = this.layer.text();\n        this.textLayer.text(String(1));\n        this.textLayer.fontSize(180);\n        this.textLayer.setPosition(-55, 10);\n        this.textLayer.color(\"black\");\n        this.setHeight(HEIGHT);\n    }\n    ;\n}\n;\n\n\n//# sourceURL=webpack:///./src/robot/CreateGoal.ts?");

/***/ }),

/***/ "./src/robot/CreateRobot.ts":
/*!**********************************!*\
  !*** ./src/robot/CreateRobot.ts ***!
  \**********************************/
/*! exports provided: CreateRobot */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CreateRobot\", function() { return CreateRobot; });\nclass CreateRobot {\n    constructor(id, color, WIDTH, HEIGHT, stage) {\n        this.id = id;\n        this.color = color;\n        this.WIDTH = WIDTH;\n        this.HEIGHT = HEIGHT;\n        this.stage = stage;\n        this.setHeight = (HEIGHT) => {\n            const ratio = HEIGHT / this.layer.getHeight();\n            this.layer.scale(ratio, ratio, this.WIDTH / 2, this.HEIGHT / 2);\n        };\n        this.boardSetPosition = (x, y) => {\n            this.layer.setPosition(x * this.WIDTH, y * this.HEIGHT);\n        };\n        this.setPosition = (x, y) => {\n            this.layer.setPosition(x, y);\n        };\n        this.select = (flag) => {\n            this.backLayer.visible(flag);\n        };\n        this.setClickListener = (func) => {\n            this.layer.listen('click', (_e) => {\n                func();\n            });\n        };\n        this.layer = stage.layer();\n        // 背景\n        this.backLayer = this.layer.rect(-180, -80, 360, 360);\n        this.backLayer.stroke(\"#D500F9\");\n        this.backLayer.strokeThickness(20);\n        // ロボット本体\n        this.robotLayer = this.layer.layer();\n        const colorLayer = this.robotLayer.layer();\n        const bb = colorLayer.layer();\n        bb.attr(\"stroke-width\", \"14.4\");\n        bb.ellipse(0, 41, 91, 84).fill(color).attr(\"stroke\", \"#FFF\");\n        bb.rect(-91, 20, 182, 182).round(22).fill(color).attr(\"stroke\", \"#FFF\");\n        const aa = colorLayer.layer();\n        aa.attr(\"stroke-width\", \"7.2\");\n        aa.rect(14, -86, 13, 86).attr(\"transform\", \"rotate(29)\").round(6.5).fill(color).attr(\"stroke\", \"#FFF\");\n        aa.rect(-143, 41, 48, 133).round(24).fill(color).attr(\"stroke\", \"#FFF\");\n        aa.rect(-58, 138, 48, 133).round(24).fill(color).attr(\"stroke\", \"#FFF\");\n        aa.scale(-1, 1);\n        const a = colorLayer.layer();\n        a.attr(\"stroke-width\", \"7.2\");\n        a.rect(14, -86, 13, 86).attr(\"transform\", \"rotate(29)\").round(6.5).fill(color).attr(\"stroke\", \"#FFF\");\n        a.rect(-143, 41, 48, 133).round(24).fill(color).attr(\"stroke\", \"#FFF\");\n        a.rect(-58, 138, 48, 133).round(24).fill(color).attr(\"stroke\", \"#FFF\");\n        const b = colorLayer.layer();\n        b.attr(\"stroke-width\", \"0.0\");\n        b.ellipse(0, 41, 91, 84).fill(color).attr(\"stroke\", \"#FFF\");\n        b.rect(-91, 20, 182, 182).round(22).fill(color).attr(\"stroke\", \"#FFF\");\n        const c = colorLayer.layer();\n        c.attr(\"stroke-width\", \"7.2\");\n        c.path().attr(\"d\", \"m-95 44.5h190\").attr(\"stroke\", \"#FFF\");\n        c.circle(-42, 0, 4).attr(\"stroke\", \"#FFF\");\n        c.circle(42, 0, 4).attr(\"stroke\", \"#FFF\");\n        // ID\n        const textLayer = this.layer.text();\n        textLayer.text(id.toString());\n        textLayer.fontSize(180);\n        textLayer.setPosition(-55, 10);\n        textLayer.color(\"black\");\n        // 設定\n        this.setHeight(HEIGHT);\n        this.select(false);\n    }\n    ;\n}\n;\n\n\n//# sourceURL=webpack:///./src/robot/CreateRobot.ts?");

/***/ }),

/***/ "./src/robot/DrawBoard.ts":
/*!********************************!*\
  !*** ./src/robot/DrawBoard.ts ***!
  \********************************/
/*! exports provided: DrawBoard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawBoard\", function() { return DrawBoard; });\n/* harmony import */ var acgraph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! acgraph */ \"acgraph\");\n/* harmony import */ var acgraph__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(acgraph__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _CreateRobot__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CreateRobot */ \"./src/robot/CreateRobot.ts\");\n/* harmony import */ var _CreateGoal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CreateGoal */ \"./src/robot/CreateGoal.ts\");\n\n\n\nclass DrawBoard {\n    constructor(ROBOT_NUM, ROBOT_COLOR, GRID_NUM_Y, GRID_NUM_X, container) {\n        this.ROBOT_NUM = ROBOT_NUM;\n        this.ROBOT_COLOR = ROBOT_COLOR;\n        this.GRID_NUM_Y = GRID_NUM_Y;\n        this.GRID_NUM_X = GRID_NUM_X;\n        this.container = container;\n        this.createRobot = (stage) => {\n            this.robotsLayer = new Array(this.ROBOT_NUM);\n            for (let i = 0; i < this.ROBOT_NUM; ++i) {\n                this.robotsLayer[i] = new _CreateRobot__WEBPACK_IMPORTED_MODULE_1__[\"CreateRobot\"](i + 1, this.ROBOT_COLOR[i], this.GRID_WIDTH, this.GRID_HEIGHT, stage);\n            }\n        };\n        this.createGoal = (stage) => {\n            this.goalLayer = new _CreateGoal__WEBPACK_IMPORTED_MODULE_2__[\"CreateGoal\"](this.GRID_WIDTH, this.GRID_HEIGHT, stage);\n        };\n        this.createStep = (stage) => {\n            this.stepLayer = stage.layer();\n            this.stepLayer.zIndex(500);\n            this.stepLayer.setPosition(this.GRID_WIDTH * (this.GRID_NUM_X / 2 - 1), this.GRID_HEIGHT * (this.GRID_NUM_Y / 2 - 1));\n            this.stepLayer.rect(0, 0, this.GRID_WIDTH * 2, this.GRID_HEIGHT * 2).fill('#546E7A').stroke({ color: 'red', thickness: 0 });\n            this.stepText = this.stepLayer.text(0, 0, \"00\");\n            this.stepText.color(\"white\");\n            this.stepText.fontSize(64);\n        };\n        this.grid = () => {\n            for (let x = 0; x <= this.GRID_NUM_X; ++x) {\n                this.gridLayer.path().moveTo(x * this.GRID_WIDTH, 0).lineTo(x * this.GRID_WIDTH, this.GRID_NUM_Y * this.GRID_HEIGHT).stroke({ color: '#95a5a6' });\n            }\n            for (let y = 0; y <= this.GRID_NUM_Y; ++y) {\n                this.gridLayer.path().moveTo(0, y * this.GRID_HEIGHT).lineTo(this.GRID_NUM_X * this.GRID_WIDTH, y * this.GRID_HEIGHT).stroke({ color: '#95a5a6' });\n            }\n        };\n        this.step = (num) => {\n            this.stepText.text(String(num).padStart(2, \"0\"));\n            // context.fillText(cnt.toString().padStart(2, \"0\"), BOARD_SIZE / 2 - GRID_SIZE * 0.89, BOARD_SIZE / 2 + GRID_SIZE * 0.55, 72);\n        };\n        this.wall = (wallX, wallY) => {\n            this.wallLayer.remove();\n            this.wallLayer = this.stage.layer();\n            // 横\n            for (let y = 0; y <= this.GRID_NUM_Y; ++y) {\n                for (let x = 0; x < this.GRID_NUM_X; ++x) {\n                    if (!wallX[y][x])\n                        continue;\n                    let beginX = x * this.GRID_WIDTH;\n                    let beginY = y * this.GRID_HEIGHT;\n                    this.wallLayer.path().moveTo(beginX, beginY).lineTo(beginX + this.GRID_WIDTH, beginY).stroke({ color: '#546E7A' }, 6);\n                }\n            }\n            // 縦\n            for (let x = 0; x <= this.GRID_NUM_X; ++x) {\n                for (let y = 0; y < this.GRID_NUM_Y; ++y) {\n                    if (!wallY[y][x])\n                        continue;\n                    let beginX = x * this.GRID_WIDTH;\n                    let beginY = y * this.GRID_HEIGHT;\n                    this.wallLayer.path().moveTo(beginX, beginY).lineTo(beginX, beginY + this.GRID_HEIGHT).stroke({ color: '#546E7A' }, 6);\n                }\n            }\n        };\n        this.robot = (robot) => {\n            for (let i = 0; i < this.ROBOT_NUM; ++i) {\n                this.robotsLayer[i].boardSetPosition(robot[i].x, robot[i].y);\n            }\n            if (robot[this.ROBOT_NUM].id == this.ROBOT_NUM) {\n                this.goal(robot[this.ROBOT_NUM].x, robot[this.ROBOT_NUM].y, robot[this.ROBOT_NUM].id, this.ROBOT_COLOR);\n            }\n            else {\n                this.goal(robot[this.ROBOT_NUM].x, robot[this.ROBOT_NUM].y, robot[this.ROBOT_NUM].id, this.ROBOT_COLOR[robot[this.ROBOT_NUM].id]);\n            }\n        };\n        this.select = (robot_id) => {\n            for (let i = 0; i < this.ROBOT_NUM; ++i) {\n                this.robotsLayer[i].select(i == robot_id);\n            }\n        };\n        this.goal = (x, y, id, color) => {\n            this.goalLayer.setPosition(x, y);\n            this.goalLayer.changeColor(id, color);\n        };\n        this.stage = acgraph__WEBPACK_IMPORTED_MODULE_0__[\"create\"](container);\n        this.GRID_WIDTH = container.clientWidth / GRID_NUM_X;\n        this.GRID_HEIGHT = container.clientHeight / GRID_NUM_Y;\n        this.gridLayer = this.stage.layer();\n        this.grid();\n        this.createGoal(this.stage);\n        this.createRobot(this.stage);\n        this.wallLayer = this.stage.layer();\n        this.createStep(this.stage);\n    }\n}\n;\n\n\n//# sourceURL=webpack:///./src/robot/DrawBoard.ts?");

/***/ }),

/***/ "./src/robot/DrawCommand.ts":
/*!**********************************!*\
  !*** ./src/robot/DrawCommand.ts ***!
  \**********************************/
/*! exports provided: DrawCommand */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawCommand\", function() { return DrawCommand; });\n/* harmony import */ var _CreateRobot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CreateRobot */ \"./src/robot/CreateRobot.ts\");\n/* harmony import */ var acgraph__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! acgraph */ \"acgraph\");\n/* harmony import */ var acgraph__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(acgraph__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var firebase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase */ \"firebase\");\n/* harmony import */ var firebase__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(firebase__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst db = firebase__WEBPACK_IMPORTED_MODULE_2__[\"database\"]();\nconst PATH = 'RicochetRobots/';\nclass DrawCommand {\n    constructor(ROBOT_NUM, ROBOT_COLOR, uid, userName, server, container) {\n        this.ROBOT_NUM = ROBOT_NUM;\n        this.ROBOT_COLOR = ROBOT_COLOR;\n        this.uid = uid;\n        this.userName = userName;\n        this.server = server;\n        this.container = container;\n        this.step = 0;\n        this.keyAvailable = true;\n        this.createRobot = (stage) => {\n            this.robotLayer = stage.layer();\n            this.robotsLayer = new Array(this.ROBOT_NUM);\n            for (let i = 0; i < this.ROBOT_NUM; ++i) {\n                this.robotsLayer[i] = new _CreateRobot__WEBPACK_IMPORTED_MODULE_0__[\"CreateRobot\"](i + 1, this.ROBOT_COLOR[i], this.ROBOT_WIDTH, this.ROBOT_WIDTH, this.robotLayer);\n                this.robotsLayer[i].setPosition(this.ROBOT_WIDTH * i, this.container.clientHeight - 85);\n                this.robotsLayer[i].setClickListener(() => {\n                    this.server.select(i);\n                });\n            }\n            this.panelLayer = this.robotLayer.layer();\n            this.panelLayer.rect(43, 0, 234, 234);\n            this.panelLayer.text(43, 0, \"りたいあ\", { fontSize: '48px', color: '#000' });\n            this.panelLayer.listen('click', (_e) => {\n                this.server.retire();\n            });\n        };\n        this.createKeypad = (stage) => {\n            this.keypadLayer = stage.layer();\n            const width = this.container.clientWidth / 4;\n            const height = this.container.clientHeight / 4;\n            this.stepLayer = this.keypadLayer.layer();\n            this.stepLayer.rect(0, 0, 1 * width, height);\n            this.stepText = this.stepLayer.text(0, 0, \"00\");\n            this.stepText.fontSize(64);\n            // Enter\n            this.keypadLayer.ellipse(2.5 * width, 0.5 * height, 1.5 * width * 0.9, 0.5 * height * 0.9);\n            // ←\n            this.keypadLayer.ellipse(3 * width + width / 2, 1.5 * height + height / 2, width / 2 * 0.9, height * 0.9);\n            // 789 456 1230\n            this.keypadLayer.circle(0 * width + width / 2, 1 * height + height / 2, width / 2 * 0.9);\n            this.keypadLayer.circle(1 * width + width / 2, 1 * height + height / 2, width / 2 * 0.9);\n            this.keypadLayer.circle(2 * width + width / 2, 1 * height + height / 2, width / 2 * 0.9);\n            this.keypadLayer.circle(0 * width + width / 2, 2 * height + height / 2, width / 2 * 0.9);\n            this.keypadLayer.circle(1 * width + width / 2, 2 * height + height / 2, width / 2 * 0.9);\n            this.keypadLayer.circle(2 * width + width / 2, 2 * height + height / 2, width / 2 * 0.9);\n            this.keypadLayer.circle(0 * width + width / 2, 3 * height + height / 2, width / 2 * 0.9);\n            this.keypadLayer.circle(1 * width + width / 2, 3 * height + height / 2, width / 2 * 0.9);\n            this.keypadLayer.circle(2 * width + width / 2, 3 * height + height / 2, width / 2 * 0.9);\n            this.keypadLayer.circle(3 * width + width / 2, 3 * height + height / 2, width / 2 * 0.9);\n        };\n        this.select = (robot_id) => {\n            for (let i = 0; i < this.ROBOT_NUM; ++i) {\n                this.robotsLayer[i].select(i == robot_id);\n            }\n        };\n        this.addStep = (num) => {\n            if (this.step * 10 + num >= 100)\n                return false;\n            this.step = this.step * 10 + num;\n            this.stepText.text(String(this.step).padStart(2, \"0\"));\n            return true;\n        };\n        this.subStep = () => {\n            this.step = Math.floor(this.step / 10);\n            this.stepText.text(String(this.step).padStart(2, \"0\"));\n        };\n        this.resetStep = () => {\n            this.step = 0;\n            this.stepText.text(String(this.step).padStart(2, \"0\"));\n        };\n        this.vote = () => {\n            if (this.step <= 0)\n                return false;\n            if (this.step >= 100)\n                return false;\n            this.server.vote(this.step);\n            this.step = 0;\n            this.stepText.text(String(this.step).padStart(2, \"0\"));\n            return true;\n        };\n        this.toggle = () => {\n            this.setRobotListener(!this.robotLayer.visible());\n            this.setKeypadListener(!this.keypadLayer.visible());\n            this.robotLayer.visible(!this.robotLayer.visible());\n            this.keypadLayer.visible(!this.keypadLayer.visible());\n        };\n        this.mode = (str) => {\n            this.setRobotListener(false);\n            this.setKeypadListener(false);\n            this.robotLayer.visible(false);\n            this.keypadLayer.visible(false);\n            if (str == 'vote') {\n                this.setKeypadListener(true);\n                this.keypadLayer.visible(true);\n            }\n            if (str == 'move') {\n                this.setRobotListener(true);\n                this.robotLayer.visible(true);\n            }\n        };\n        this.setRobotListener = (flag) => {\n            if (!flag)\n                return;\n            window.document.onkeydown = (event) => {\n                if (event.key === 'Backspace') {\n                    return false;\n                }\n            };\n            window.document.onkeyup = (event) => {\n                if (!this.keyAvailable)\n                    return false;\n                this.keyAvailable = false;\n                if (event.key === 'ArrowRight') {\n                    this.server.move(0);\n                }\n                if (event.key === 'ArrowDown') {\n                    this.server.move(1);\n                }\n                if (event.key === 'ArrowLeft') {\n                    this.server.move(2);\n                }\n                if (event.key === 'ArrowUp') {\n                    this.server.move(3);\n                }\n                if (event.key === 'r') {\n                    this.server.reset();\n                }\n                if (event.key === 'Backspace') {\n                    this.server.removeOnce();\n                }\n                if (event.key === '1') {\n                    this.server.select(0);\n                }\n                if (event.key === '2') {\n                    this.server.select(1);\n                }\n                if (event.key === '3') {\n                    this.server.select(2);\n                }\n                if (event.key === '4') {\n                    this.server.select(3);\n                }\n                // if(event.key === 't') {\n                // \tthis.toggle();\n                // }\n                this.keyAvailable = true;\n                return true;\n            };\n        };\n        this.setKeypadListener = (flag) => {\n            if (!flag)\n                return;\n            window.document.onkeydown = (event) => {\n                if (event.key === 'Backspace') {\n                    return false;\n                }\n            };\n            window.document.onkeyup = (event) => {\n                if ('0' <= event.key && event.key <= '9') {\n                    this.addStep(Number(event.key));\n                }\n                if (event.key === 'Backspace') {\n                    this.subStep();\n                }\n                if (event.key === 'r') {\n                    this.resetStep();\n                }\n                if (event.key === 'Enter') {\n                    this.vote();\n                }\n                // if(event.key === 't') {\n                // \tthis.toggle();\n                // }\n            };\n        };\n        this.stage = acgraph__WEBPACK_IMPORTED_MODULE_1__[\"create\"](container);\n        this.ROBOT_WIDTH = container.clientWidth / ROBOT_NUM;\n        this.createRobot(this.stage);\n        this.createKeypad(this.stage);\n        this.robotLayer.visible(false);\n        this.keypadLayer.visible(true);\n        this.setRobotListener(false);\n        this.setKeypadListener(true);\n    }\n}\n;\n\n\n//# sourceURL=webpack:///./src/robot/DrawCommand.ts?");

/***/ }),

/***/ "./src/robot/DrawScore.ts":
/*!********************************!*\
  !*** ./src/robot/DrawScore.ts ***!
  \********************************/
/*! exports provided: DrawScore */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawScore\", function() { return DrawScore; });\n/* harmony import */ var firebase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase */ \"firebase\");\n/* harmony import */ var firebase__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(firebase__WEBPACK_IMPORTED_MODULE_0__);\n\nconst db = firebase__WEBPACK_IMPORTED_MODULE_0__[\"database\"]();\nconst PATH = 'RicochetRobots/';\nclass DrawScore {\n    constructor(/*private HEIGHT: number,*/ server) {\n        this.server = server;\n        this.setVoteListener = () => {\n            db.ref(PATH + 'vote').on('value', (res) => {\n                while (this.voteTextContainer.firstChild)\n                    this.voteTextContainer.removeChild(this.voteTextContainer.firstChild);\n                const obj = res.val();\n                const v = new Array();\n                for (const key in obj) {\n                    v.push(obj[key]);\n                }\n                v.sort((lhs, rhs) => {\n                    if (lhs.step > rhs.step)\n                        return 1;\n                    if (lhs.step == rhs.step && lhs.time > rhs.time)\n                        return 1;\n                    return -1;\n                });\n                for (const e of v) {\n                    if (e.step == 1000)\n                        continue;\n                    const textBox = document.createElement(\"div\");\n                    textBox.className = \"element-text\";\n                    const date = new Date(e.time);\n                    const h = String(date.getHours()).padStart(2, \"0\");\n                    const m = String(date.getMinutes()).padStart(2, \"0\");\n                    const s = String(date.getSeconds()).padStart(2, \"0\");\n                    const ms = String(date.getMilliseconds()).padStart(3, \"0\");\n                    const time = `${h}:${m}:${s}:${ms}`;\n                    textBox.innerText = String(e.step) + \" \" + String(e.name) + \" \" + time;\n                    this.voteTextContainer.appendChild(textBox);\n                }\n            });\n        };\n        this.setScoreListener = () => {\n            db.ref(PATH + 'score').on('value', (res) => {\n                while (this.scoreTextContainer.firstChild)\n                    this.scoreTextContainer.removeChild(this.scoreTextContainer.firstChild);\n                const obj = res.val();\n                const v = new Array();\n                for (const key in obj) {\n                    v.push(obj[key]);\n                }\n                v.sort((lhs, rhs) => {\n                    if (lhs.pt < rhs.pt)\n                        return 1;\n                    return -1;\n                });\n                for (const e of v) {\n                    const textBox = document.createElement(\"div\");\n                    textBox.className = \"element-text\";\n                    textBox.innerText = String(e.pt) + \"pt: \" + String(e.name);\n                    this.scoreTextContainer.appendChild(textBox);\n                }\n            });\n        };\n        this.setTimerListener = () => {\n            db.ref(PATH + 'voteLimitTime').on('value', (res) => {\n                clearInterval(this.timerID);\n                const time = new Date(res.val().time);\n                this.timerID = setInterval(this.countDown, 500, time);\n            });\n        };\n        this.countDown = (endTime) => {\n            const now = new Date();\n            const s = Math.floor((endTime.getTime() - now.getTime()) / 1000);\n            if (s <= 0) {\n                clearInterval(this.timerID);\n                this.server.voteEnd();\n                this.timerContainer.innerText = `残り時間：${String(0).padStart(2, \"0\")}`;\n                return;\n            }\n            this.timerContainer.innerText = `残り時間：${String(s).padStart(2, \"0\")}`;\n        };\n        // container.style.height = this.HEIGHT.toString() + \"px\";\n        const voteContainer = document.getElementById(\"vote-container\");\n        this.voteTextContainer = document.createElement(\"div\");\n        this.voteTextContainer.id = \"vote-element-container\";\n        this.setVoteListener();\n        voteContainer.appendChild(this.voteTextContainer);\n        const scoreContainer = document.getElementById(\"score-container\");\n        this.scoreTextContainer = document.createElement(\"div\");\n        this.scoreTextContainer.id = \"score-element-container\";\n        this.setScoreListener();\n        scoreContainer.appendChild(this.scoreTextContainer);\n        this.timerContainer = document.getElementById(\"timer-container\");\n        this.setTimerListener();\n    }\n}\n;\n\n\n//# sourceURL=webpack:///./src/robot/DrawScore.ts?");

/***/ }),

/***/ "./src/robot/Server.ts":
/*!*****************************!*\
  !*** ./src/robot/Server.ts ***!
  \*****************************/
/*! exports provided: Server */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Server\", function() { return Server; });\n/* harmony import */ var firebase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase */ \"firebase\");\n/* harmony import */ var firebase__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(firebase__WEBPACK_IMPORTED_MODULE_0__);\n\nconst db = firebase__WEBPACK_IMPORTED_MODULE_0__[\"database\"]();\nconst PATH = 'RicochetRobots/';\nclass Server {\n    constructor(uid, userName) {\n        this.uid = uid;\n        this.userName = userName;\n        this.select = (robot_id) => {\n            return db.ref(PATH + 'select').set(robot_id);\n        };\n        this.moveRecover = (robot, move) => {\n            const ROBOT_NUM = robot.length - 1;\n            const N = this.wallX.length - 1;\n            const dx = [1, 0, -1, 0];\n            const dy = [0, 1, 0, -1];\n            for (let i = 0; i < move.length; i += 2) {\n                const robot_id = Number(move[i]);\n                const dir = Number(move[i + 1]);\n                let px = robot[robot_id].x;\n                let py = robot[robot_id].y;\n                while (true) {\n                    const nx = px + dx[dir];\n                    const ny = py + dy[dir];\n                    if (ny < 0 || N <= ny)\n                        break;\n                    if (nx < 0 || N <= nx)\n                        break;\n                    let robotExist = false;\n                    for (let i = 0; i < ROBOT_NUM; ++i) {\n                        if (i == robot_id)\n                            continue;\n                        if (robot[i].x == nx && robot[i].y == ny) {\n                            robotExist = true;\n                        }\n                    }\n                    if (robotExist)\n                        break;\n                    if (dir == 0 && this.wallY[ny][nx])\n                        break;\n                    if (dir == 1 && this.wallX[ny][nx])\n                        break;\n                    if (dir == 2 && this.wallY[py][px])\n                        break;\n                    if (dir == 3 && this.wallX[py][px])\n                        break;\n                    px = nx, py = ny;\n                }\n                robot[robot_id].x = px;\n                robot[robot_id].y = py;\n            }\n            return robot;\n        };\n        this.move = (dir) => {\n            let robot_id = 0;\n            db.ref(PATH + 'select').once('value', (res) => {\n                robot_id = res.val();\n            });\n            db.ref(PATH + 'robot').once('value', async (res) => {\n                const robot = res.val();\n                const ROBOT_NUM = robot.length - 1;\n                const N = this.wallX.length - 1;\n                const dx = [1, 0, -1, 0];\n                const dy = [0, 1, 0, -1];\n                let px = robot[robot_id].x;\n                let py = robot[robot_id].y;\n                while (true) {\n                    const nx = px + dx[dir];\n                    const ny = py + dy[dir];\n                    if (ny < 0 || N <= ny)\n                        break;\n                    if (nx < 0 || N <= nx)\n                        break;\n                    let robotExist = false;\n                    for (let i = 0; i < ROBOT_NUM; ++i) {\n                        if (i == robot_id)\n                            continue;\n                        if (robot[i].x == nx && robot[i].y == ny) {\n                            robotExist = true;\n                        }\n                    }\n                    if (robotExist)\n                        break;\n                    if (dir == 0 && this.wallY[ny][nx])\n                        break;\n                    if (dir == 1 && this.wallX[ny][nx])\n                        break;\n                    if (dir == 2 && this.wallY[py][px])\n                        break;\n                    if (dir == 3 && this.wallX[py][px])\n                        break;\n                    px = nx, py = ny;\n                }\n                if (robot[robot_id].x == px && robot[robot_id].y == py) {\n                    return false;\n                }\n                robot[robot_id].x = px;\n                robot[robot_id].y = py;\n                let trueStep;\n                await db.ref(PATH + 'step').once('value', (stepSnapshot) => {\n                    trueStep = stepSnapshot.val() + 1;\n                    db.ref(PATH + 'step').set(trueStep);\n                });\n                await db.ref(PATH + 'moveStr').once('value', (moveSnapshot) => {\n                    db.ref(PATH + 'moveStr').set(moveSnapshot.val() + String(robot_id) + String(dir));\n                });\n                await db.ref(PATH + 'robot').set(robot);\n                if (robot[robot_id].x == robot[ROBOT_NUM].x && robot[robot_id].y == robot[ROBOT_NUM].y) {\n                    if (robot[ROBOT_NUM].id == ROBOT_NUM || robot_id == robot[ROBOT_NUM].id) {\n                        let step = 0;\n                        await db.ref(PATH + 'vote/' + this.uid).once('value', (voteSnapshot) => {\n                            step = voteSnapshot.val().step;\n                        });\n                        if (trueStep <= step) {\n                            this.clear();\n                        }\n                    }\n                }\n                return true;\n            });\n        };\n        this.wall = (wallX, wallY) => {\n            this.wallX = wallX;\n            this.wallY = wallY;\n        };\n        this.reset = () => {\n            this.stepReset();\n            db.ref(PATH + 'baseRobot').once('value', (baseSnapshot) => {\n                db.ref(PATH + 'robot').set(baseSnapshot.val());\n            });\n        };\n        this.removeOnce = () => {\n            db.ref(PATH + 'moveStr').once('value', (moveSnapshot) => {\n                let move = moveSnapshot.val();\n                if (move.length - 2 >= 0)\n                    db.ref(PATH + 'select').set(move[move.length - 2]);\n                move = move.slice(0, move.length - 2);\n                db.ref(PATH + 'moveStr').set(move);\n                db.ref(PATH + 'baseRobot').once('value', (baseSnapshot) => {\n                    const robot = baseSnapshot.val();\n                    db.ref(PATH + 'robot').set(this.moveRecover(robot, move));\n                });\n                db.ref(PATH + 'step').once('value', (stepSnapshot) => {\n                    db.ref(PATH + 'step').set(Math.max(0, stepSnapshot.val() - 1));\n                });\n            });\n        };\n        this.clear = () => {\n            db.ref(PATH + 'announce/').set(`${this.userName} win!`);\n            db.ref(PATH + 'score/' + this.uid).once('value', (scoreSnapshot) => {\n                const obj = scoreSnapshot.val();\n                obj.pt += 1;\n                db.ref(PATH + 'score/' + this.uid).set(obj);\n                db.ref(PATH + 'announce/').set(`${this.userName}: ${obj.pt}pt → ${obj.pt + 1}pt`);\n            });\n            db.ref(PATH + 'mode/' + this.uid).set('vote');\n            this.goalChange();\n            db.ref(PATH + 'announce/').set(\"投票受付中\");\n        };\n        this.voteEnd = () => {\n            db.ref(PATH + 'vote/').once('value', async (res) => {\n                const vote = res.val();\n                if (vote == null) {\n                    db.ref(PATH + 'mode/' + this.uid).set('vote');\n                    db.ref(PATH + 'announce/').set(\"投票受付中\");\n                    return;\n                }\n                const v = new Array();\n                for (const key in vote) {\n                    const obj = vote[key];\n                    obj.uid = key;\n                    v.push(obj);\n                }\n                v.sort((lhs, rhs) => {\n                    if (lhs.step > rhs.step)\n                        return 1;\n                    if (lhs.step == rhs.step && lhs.time > rhs.time)\n                        return 1;\n                    return -1;\n                });\n                const top = v[0].uid;\n                if (top == this.uid) {\n                    db.ref(PATH + 'mode/' + this.uid).set('move');\n                    db.ref(PATH + 'announce/').set(`${this.userName}の番です`);\n                }\n                else {\n                    db.ref(PATH + 'mode/' + this.uid).set('vote');\n                }\n            });\n        };\n        this.vote = (step) => {\n            db.ref(PATH + 'vote/').once('value', async (res) => {\n                const before = res.val();\n                if (before == null) {\n                    db.ref(PATH + 'vote/' + this.uid).update({ name: this.userName, step: step, time: new Date() });\n                    const date = new Date();\n                    date.setSeconds(date.getSeconds() + 32);\n                    db.ref(PATH + 'voteLimitTime/').update({ uid: this.uid, time: date });\n                    return;\n                }\n                const v = new Array();\n                for (const key in before) {\n                    const obj = before[key];\n                    obj.uid = key;\n                    v.push(obj);\n                }\n                v.sort((lhs, rhs) => {\n                    if (lhs.step > rhs.step)\n                        return 1;\n                    if (lhs.step == rhs.step && lhs.time > rhs.time)\n                        return 1;\n                    return -1;\n                });\n                const beforeTop = v[0].uid;\n                v.push({ uid: this.uid, name: this.userName, step: step, time: new Date() });\n                v.sort((lhs, rhs) => {\n                    if (lhs.step > rhs.step)\n                        return 1;\n                    if (lhs.step == rhs.step && lhs.time > rhs.time)\n                        return 1;\n                    return -1;\n                });\n                const afterTop = v[0].uid;\n                if (beforeTop != afterTop) {\n                    const date = new Date();\n                    date.setSeconds(date.getSeconds() + 32);\n                    db.ref(PATH + 'voteLimitTime/').update({ uid: this.uid, time: date });\n                }\n                db.ref(PATH + 'vote/' + this.uid).update({ name: this.userName, step: step, time: new Date() });\n            });\n        };\n        this.retire = () => {\n            this.reset();\n            db.ref(PATH + 'vote/' + this.uid).set({});\n            db.ref(PATH + 'mode/' + this.uid).set('vote');\n            db.ref(PATH + 'announce/').set(`${this.userName}がリタイアしました`);\n            db.ref(PATH + 'vote/').once('value', async (res) => {\n                const vote = res.val();\n                if (vote == null) {\n                    db.ref(PATH + 'announce/').set(\"投票受付中\");\n                    return;\n                }\n                const v = new Array();\n                for (const key in vote) {\n                    const obj = vote[key];\n                    obj.uid = key;\n                    v.push(obj);\n                }\n                v.sort((lhs, rhs) => {\n                    if (lhs.step > rhs.step)\n                        return 1;\n                    if (lhs.step == rhs.step && lhs.time > rhs.time)\n                        return 1;\n                    return -1;\n                });\n                const top = v[0].uid;\n                db.ref(PATH + 'announce/').set(`${v[0].name}の番です`);\n                db.ref(PATH + 'mode/' + top).set('move');\n            });\n        };\n        this.voteReset = () => {\n            db.ref(PATH + 'vote/').set({});\n            db.ref(PATH + 'mode/').once('value', (res) => {\n                const obj = res.val();\n                for (const key in obj) {\n                    obj[key] = \"vote\";\n                }\n                db.ref(PATH + 'mode/').set(obj);\n            });\n        };\n        this.stepReset = () => {\n            db.ref(PATH + 'moveStr/').set(\"\");\n            db.ref(PATH + 'step/').set(0);\n        };\n        this.goalChange = () => {\n            this.voteReset();\n            this.stepReset();\n            db.ref(PATH + 'robot').once('value', async (res) => {\n                // スタート位置記憶\n                const robot = res.val();\n                const ROBOT_NUM = robot.length - 1;\n                // ゴール変更\n                db.ref(PATH + 'goal').once('value', async (res) => {\n                    const goal = res.val();\n                    while (true) {\n                        const m = goal[Math.floor(Math.random() * goal.length)];\n                        let find = true;\n                        for (let i = 0; i < ROBOT_NUM; ++i) {\n                            if (robot[i].x == m.x && robot[i].y == m.y) {\n                                find = false;\n                            }\n                        }\n                        if (find) {\n                            const color = Math.floor(Math.random() * (ROBOT_NUM + 1));\n                            robot[ROBOT_NUM].id = color;\n                            robot[ROBOT_NUM].x = m.x;\n                            robot[ROBOT_NUM].y = m.y;\n                            break;\n                        }\n                    }\n                    db.ref(PATH + 'robot').set(robot);\n                    db.ref(PATH + 'baseRobot').set(robot);\n                });\n            });\n        };\n    }\n}\n;\n\n\n//# sourceURL=webpack:///./src/robot/Server.ts?");

/***/ }),

/***/ "acgraph":
/*!**************************!*\
  !*** external "acgraph" ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = acgraph;\n\n//# sourceURL=webpack:///external_%22acgraph%22?");

/***/ }),

/***/ "firebase":
/*!***************************!*\
  !*** external "firebase" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = firebase;\n\n//# sourceURL=webpack:///external_%22firebase%22?");

/***/ })

/******/ });