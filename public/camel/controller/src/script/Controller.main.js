/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/Controller.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/Controller.ts":
/*!***************************!*\
  !*** ./src/Controller.ts ***!
  \***************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _DrawCamel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DrawCamel */ \"./src/DrawCamel.ts\");\n/* harmony import */ var _DrawGrid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DrawGrid */ \"./src/DrawGrid.ts\");\n/* harmony import */ var _DrawDice__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DrawDice */ \"./src/DrawDice.ts\");\n/* harmony import */ var _DrawAnnounce__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DrawAnnounce */ \"./src/DrawAnnounce.ts\");\n/* harmony import */ var _DrawPlayer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DrawPlayer */ \"./src/DrawPlayer.ts\");\n/* harmony import */ var _Server__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Server */ \"./src/Server.ts\");\n/* harmony import */ var firebase__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! firebase */ \"firebase\");\n/* harmony import */ var firebase__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(firebase__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\nconst db = firebase__WEBPACK_IMPORTED_MODULE_6__[\"database\"]();\nconst PATH = 'CamelUp/';\n// default\nconst CAMEL_COLOR = ['#00569b', '#39b20d', '#f56300', '#ffffff', '#ffd302'];\n// Blue Set\n// const CAMEL_COLOR = ['#673AB7', '#3F51B5', '#2196F3', '#03A9F4', '#00BCD4'];\nconst Game = new _Server__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\nconst Camel = new _DrawCamel__WEBPACK_IMPORTED_MODULE_0__[\"default\"](5, CAMEL_COLOR, 60, './src/images/camel.png', 'camel');\nconst Dice = new _DrawDice__WEBPACK_IMPORTED_MODULE_2__[\"default\"](5, CAMEL_COLOR, 60, 'dice');\nconst Grid = new _DrawGrid__WEBPACK_IMPORTED_MODULE_1__[\"default\"](16, Camel.CAMEL_GROUND, 30, 'grid');\nconst Announce = new _DrawAnnounce__WEBPACK_IMPORTED_MODULE_3__[\"default\"]('announce');\nconst Player = new _DrawPlayer__WEBPACK_IMPORTED_MODULE_4__[\"default\"]('player');\ndb.ref(PATH + 'camel').on('value', (res) => {\n    Camel.draw(res.val());\n});\ndb.ref(PATH + 'dice').on('value', (res) => {\n    Dice.draw(res.val());\n});\ndb.ref(PATH + 'grid').on('value', (res) => {\n    Grid.GROUND = Camel.CAMEL_GROUND;\n    Grid.draw(res.val());\n});\ndb.ref(PATH + 'announce').on('value', (res) => {\n    Announce.draw(res.val());\n});\ndb.ref(PATH + 'player/name').on('value', (res) => {\n    Player.drawName(res.val());\n});\ndb.ref(PATH + 'player/point').on('value', (res) => {\n    Player.drawPoint(res.val());\n});\ndb.ref(PATH + 'player/token').on('value', (res) => {\n    Player.drawToken(res.val());\n});\ndb.ref(PATH + 'player/rank').on('value', (res) => {\n    Player.drawRank(res.val());\n});\ndb.ref(PATH + 'player/now').on('value', (res) => {\n    Player.drawPlayerNow(res.val());\n});\ndocument.getElementById('Start').onclick = () => {\n    const e = document.getElementById('playerNum');\n    const PLAYER_NUM = parseInt(e.value);\n    const PLAYER_NAME = new Array(PLAYER_NUM);\n    for (let i = 0; i < PLAYER_NUM; ++i) {\n        const eplayer = document.getElementById('player' + i.toString());\n        PLAYER_NAME[i] = eplayer.value;\n    }\n    Grid.nameChange(PLAYER_NAME);\n    Game.start(PLAYER_NAME);\n};\ndocument.getElementById('DiceRoll').onclick = () => {\n    Game.DiceRoll();\n};\ndocument.getElementById('PanelSet').onclick = () => {\n    const ex = document.getElementById('PanelSetX');\n    const x = parseInt(ex.value);\n    const estat = document.getElementsByName('PanelSetDetail');\n    let move = 0;\n    for (let i = 0; i < estat.length; i++) {\n        const stat = estat[i];\n        if (stat.checked) {\n            move = (i == 0 ? 1 : -1);\n        }\n    }\n    try {\n        Game.PanelSet(x, move);\n    }\n    catch (e) {\n        alert(e);\n    }\n};\ndocument.getElementById('Bet').onclick = () => {\n    const e = document.getElementsByName('BetColor');\n    let id = 0;\n    for (let i = 0; i < e.length; i++) {\n        const color = e[i];\n        if (color.checked) {\n            id = i;\n        }\n    }\n    try {\n        Game.Bet(id);\n    }\n    catch (e) {\n        alert(e);\n    }\n};\ndocument.getElementById('FinalBet').onclick = () => {\n    const estat = document.getElementsByName('FinalBetDetail');\n    let stat = 0;\n    for (let i = 0; i < estat.length; i++) {\n        const ee = estat[i];\n        if (ee.checked) {\n            stat = i;\n        }\n    }\n    const ecolor = document.getElementsByName('FinalBetColor');\n    let id = 0;\n    for (let i = 0; i < ecolor.length; i++) {\n        const color = ecolor[i];\n        if (color.checked) {\n            id = i;\n        }\n    }\n    try {\n        Game.FinalBet(id, stat);\n    }\n    catch (e) {\n        alert(e);\n    }\n};\n\n\n//# sourceURL=webpack:///./src/Controller.ts?");

/***/ }),

/***/ "./src/Dice.ts":
/*!*********************!*\
  !*** ./src/Dice.ts ***!
  \*********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Dice; });\nclass Dice {\n    constructor(CAMEL_NUM, MOVE_NUM) {\n        this.CAMEL_NUM = CAMEL_NUM;\n        this.MOVE_NUM = MOVE_NUM;\n        this.init = () => {\n            for (let i = 0; i < this.CAMEL_NUM; ++i) {\n                this.used[i] = null;\n            }\n        };\n        this.roll = () => {\n            let color, move;\n            while (true) {\n                color = Math.floor(Math.random() * this.CAMEL_NUM);\n                if (this.used[color])\n                    continue;\n                move = Math.floor(Math.random() * this.MOVE_NUM) + 1;\n                this.used[color] = move;\n                break;\n            }\n            let endFlg = false;\n            { // check\n                let usedAll = true;\n                for (let i = 0; i < this.CAMEL_NUM; ++i) {\n                    if (this.used[i] == null)\n                        usedAll = false;\n                }\n                if (usedAll) {\n                    endFlg = true;\n                    // this.init();\n                    // throw 'Every camel has already moved.';\n                }\n            }\n            return { color: color, move: move, endFlg: endFlg };\n        };\n        this.status = () => {\n            return this.used;\n        };\n        this.used = new Array(CAMEL_NUM);\n        this.init();\n    }\n}\n;\n\n\n//# sourceURL=webpack:///./src/Dice.ts?");

/***/ }),

/***/ "./src/DrawAnnounce.ts":
/*!*****************************!*\
  !*** ./src/DrawAnnounce.ts ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Announce; });\nclass Announce {\n    constructor(/*private WIDTH: number, private HEIGHT: number,*/ _canvas) {\n        this.draw = (str) => {\n            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n            this.context.font = \"64px Oxanium\";\n            this.context.fillStyle = 'black';\n            this.context.lineWidth = 1;\n            this.context.fillText(str, 0, 64);\n        };\n        this.canvas = document.getElementById(_canvas);\n        this.context = this.canvas.getContext('2d');\n    }\n}\n;\n\n\n//# sourceURL=webpack:///./src/DrawAnnounce.ts?");

/***/ }),

/***/ "./src/DrawCamel.ts":
/*!**************************!*\
  !*** ./src/DrawCamel.ts ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Camels; });\nclass Camels {\n    constructor(CAMEL_NUM, CAMEL_COLOR, CAMEL_WIDTH, src, _canvas) {\n        this.CAMEL_NUM = CAMEL_NUM;\n        this.CAMEL_COLOR = CAMEL_COLOR;\n        this.CAMEL_WIDTH = CAMEL_WIDTH;\n        this.init = (img) => {\n            for (let i = 0; i < this.CAMEL_NUM; ++i) {\n                ((canvas, context) => {\n                    context.clearRect(0, 0, canvas.width, canvas.height);\n                    context.drawImage(img, 0, 0, this.CAMEL_WIDTH, this.CAMEL_HEIGHT);\n                    this.imageData[i] = context.getImageData(0, 0, this.CAMEL_WIDTH, this.CAMEL_HEIGHT + 4);\n                    context.clearRect(0, 0, canvas.width, canvas.height);\n                    // Color Change\n                    ((imageData, color) => {\n                        const w = imageData.width;\n                        const h = imageData.height;\n                        const r = parseInt(color.substring(1, 3), 16);\n                        const g = parseInt(color.substring(3, 5), 16);\n                        const b = parseInt(color.substring(5, 7), 16);\n                        for (let j = 0; j < h; ++j) {\n                            for (let k = 0; k < w; ++k) {\n                                if (imageData.data[(j * w + k) * 4 + 0] < 5)\n                                    continue;\n                                if (imageData.data[(j * w + k) * 4 + 1] < 5)\n                                    continue;\n                                if (imageData.data[(j * w + k) * 4 + 2] < 5)\n                                    continue;\n                                imageData.data[(j * w + k) * 4 + 0] = r;\n                                imageData.data[(j * w + k) * 4 + 1] = g;\n                                imageData.data[(j * w + k) * 4 + 2] = b;\n                            }\n                        }\n                    })(this.imageData[i], this.CAMEL_COLOR[i]);\n                })(this.canvas[i], this.context[i]);\n            }\n        };\n        this.drawOnce = (id, x, y) => {\n            this.context[id].clearRect(0, 0, this.canvas[id].width, this.canvas[id].height);\n            this.context[id].putImageData(this.imageData[id], x * this.CAMEL_WIDTH, y * (this.CAMEL_HEIGHT - this.CAMEL_MARGIN));\n        };\n        this.draw = (json) => {\n            for (let i = 0; i < this.CAMEL_NUM; ++i) {\n                this.drawOnce(i, json.x[i], json.y[i]);\n            }\n        };\n        const img = new Image();\n        img.src = src;\n        img.onload = async () => {\n            const ratio = CAMEL_WIDTH / img.width;\n            this.CAMEL_HEIGHT = img.height * ratio;\n            this.CAMEL_MARGIN = 24 * ratio;\n            this.canvas = new Array(CAMEL_NUM);\n            this.context = new Array(CAMEL_NUM);\n            this.imageData = new Array(CAMEL_NUM);\n            this.CAMEL_GROUND = (CAMEL_NUM + 1) * this.CAMEL_HEIGHT - CAMEL_NUM * this.CAMEL_MARGIN;\n            for (let i = 0; i < CAMEL_NUM; ++i) {\n                this.canvas[i] = await document.getElementById(_canvas + i.toString());\n                this.context[i] = await this.canvas[i].getContext('2d');\n            }\n            await this.init(img);\n        };\n    }\n}\n;\n\n\n//# sourceURL=webpack:///./src/DrawCamel.ts?");

/***/ }),

/***/ "./src/DrawDice.ts":
/*!*************************!*\
  !*** ./src/DrawDice.ts ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Dice; });\nclass Dice {\n    constructor(CAMEL_NUM = 5, CAMEL_COLOR, WIDTH, _canvas) {\n        this.CAMEL_NUM = CAMEL_NUM;\n        this.CAMEL_COLOR = CAMEL_COLOR;\n        this.WIDTH = WIDTH;\n        this.drawNumber = (id, move) => {\n            this.context.font = \"64px Oxanium\";\n            const str = (move == null ? '?' : move.toString());\n            this.context.strokeStyle = 'black';\n            this.context.strokeText(str, id * this.WIDTH + this.WIDTH * 0.2, this.WIDTH - this.WIDTH * 0.125);\n            this.context.fillStyle = 'white';\n            this.context.fillText(str, id * this.WIDTH + this.WIDTH * 0.2, this.WIDTH - this.WIDTH * 0.125);\n        };\n        this.drawBase = () => {\n            this.context.strokeStyle = '#95a5a6';\n            this.context.lineWidth = 3;\n            for (let id = 0; id < this.CAMEL_NUM; ++id) {\n                this.context.fillStyle = this.CAMEL_COLOR[id];\n                this.context.fillRect(id * this.WIDTH, 0, this.WIDTH, this.WIDTH);\n                this.context.strokeRect(id * this.WIDTH, 0, this.WIDTH, this.WIDTH);\n            }\n        };\n        this.draw = (json) => {\n            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n            // Base\n            this.drawBase();\n            // Number\n            if (json == null) {\n                json = new Array(this.CAMEL_NUM);\n            }\n            for (let id = 0; id < this.CAMEL_NUM; ++id) {\n                this.drawNumber(id, json[id]);\n            }\n        };\n        this.canvas = document.getElementById(_canvas);\n        this.context = this.canvas.getContext('2d');\n    }\n}\n;\n\n\n//# sourceURL=webpack:///./src/DrawDice.ts?");

/***/ }),

/***/ "./src/DrawGrid.ts":
/*!*************************!*\
  !*** ./src/DrawGrid.ts ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Grid; });\nclass Grid {\n    constructor(GRID_NUM, GROUND, HEIGHT, _canvas) {\n        this.GRID_NUM = GRID_NUM;\n        this.GROUND = GROUND;\n        this.HEIGHT = HEIGHT;\n        this.nameChange = (PLAYER_NAME) => {\n            this.PLAYER_NUM = PLAYER_NAME.length;\n            this.PLAYER_NAME = PLAYER_NAME;\n        };\n        this.drawPanel = (name, x, move) => {\n            this.context.font = \"32px Oxanium\";\n            const str = (move > 0 ? '+' : '') + move.toString();\n            this.context.fillStyle = (move > 0 ? 'red' : 'blue');\n            this.context.fillText(str, x * this.WIDTH + 0.25 * this.WIDTH, this.GROUND + this.HEIGHT);\n            this.context.fillText(name, x * this.WIDTH + 0.25 * this.WIDTH, this.GROUND + this.HEIGHT * 2, this.WIDTH);\n        };\n        this.drawIndex = () => {\n            this.context.font = \"16px Oxanium\";\n            this.context.fillStyle = 'white';\n            for (let x = 1; x <= this.GRID_NUM; ++x) {\n                const str = x.toString();\n                this.context.fillText(str, x * this.WIDTH, this.GROUND + this.HEIGHT);\n            }\n        };\n        this.draw = (json) => {\n            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n            // Grid\n            this.context.fillStyle = 'black';\n            this.context.fillStyle = '#95a5a6';\n            this.context.fillRect(0, this.GROUND, this.canvas.width, this.HEIGHT);\n            this.context.lineWidth = 1;\n            this.context.strokeStyle = '#ffffff';\n            for (let x = 1; x <= this.GRID_NUM + 1; ++x) {\n                this.context.beginPath();\n                this.context.moveTo(x * this.WIDTH, this.GROUND);\n                this.context.lineTo(x * this.WIDTH, this.GROUND + this.HEIGHT);\n                this.context.stroke();\n            }\n            // Index\n            this.drawIndex();\n            // Panel\n            for (let i = 0; i < this.PLAYER_NUM; ++i) {\n                const move = json.move[i];\n                if (move != null) {\n                    this.drawPanel(this.PLAYER_NAME[i], json.x[i], move);\n                }\n            }\n        };\n        this.canvas = document.getElementById(_canvas);\n        this.context = this.canvas.getContext('2d');\n        this.WIDTH = this.canvas.width / (GRID_NUM + 2);\n    }\n}\n;\n\n\n//# sourceURL=webpack:///./src/DrawGrid.ts?");

/***/ }),

/***/ "./src/DrawPlayer.ts":
/*!***************************!*\
  !*** ./src/DrawPlayer.ts ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Player; });\n/* harmony import */ var numeral__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! numeral */ \"numeral\");\n/* harmony import */ var numeral__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(numeral__WEBPACK_IMPORTED_MODULE_0__);\n\nclass Player {\n    constructor(_canvas) {\n        this.NAME_LIMIT = 6;\n        this.init = (name) => {\n            this.PLAYER_NAME = name;\n            this.PLAYER_NUM = name.length;\n            this.HEIGHT = this.canvas.height / this.PLAYER_NUM * 0.9;\n        };\n        this.drawToken = (token) => {\n            this.context.clearRect(0, 0, this.HEIGHT, this.canvas.height);\n            this.context.beginPath();\n            this.context.arc(this.HEIGHT / 2, token * this.HEIGHT + this.HEIGHT / 2, this.HEIGHT / 2, 0, 2 * Math.PI, true);\n            this.context.fillStyle = 'red';\n            this.context.fill();\n        };\n        this.drawRank = (rank) => {\n            this.context.clearRect(0, 0, this.HEIGHT, this.canvas.height);\n            for (let i = 0; i < this.PLAYER_NUM; ++i) {\n                this.context.fillStyle = 'black';\n                if (rank[i] == 1)\n                    this.context.fillStyle = 'gold';\n                if (rank[i] == 2)\n                    this.context.fillStyle = 'silver';\n                if (rank[i] == 3)\n                    this.context.fillStyle = 'chocolate';\n                this.context.fillText(numeral__WEBPACK_IMPORTED_MODULE_0__(rank[i]).format('0o'), 0, (i + 1) * this.HEIGHT, this.HEIGHT);\n            }\n        };\n        this.drawPoint = (point) => {\n            this.context.clearRect(this.HEIGHT + this.HEIGHT * this.NAME_LIMIT, 0, this.canvas.width, this.canvas.height);\n            this.context.lineWidth = 1;\n            this.context.strokeStyle = '#ffffff';\n            this.context.font = this.HEIGHT + 'px Oxanium';\n            for (let i = 0; i < this.PLAYER_NUM; ++i) {\n                this.context.fillStyle = 'black';\n                this.context.fillText(point[i].toString() + 'pt', this.HEIGHT * 2 + this.HEIGHT * this.NAME_LIMIT, (i + 1) * this.HEIGHT);\n            }\n        };\n        this.drawName = (name) => {\n            this.init(name);\n            this.context.clearRect(this.HEIGHT, 0, this.HEIGHT * this.NAME_LIMIT, this.canvas.height);\n            this.context.lineWidth = 1;\n            this.context.strokeStyle = '#ffffff';\n            this.context.font = this.HEIGHT + 'px Oxanium';\n            for (let i = 0; i < this.PLAYER_NUM; ++i) {\n                this.context.fillStyle = 'black';\n                this.context.fillText(name[i], this.HEIGHT, (i + 1) * this.HEIGHT, this.HEIGHT * this.NAME_LIMIT);\n            }\n        };\n        this.drawPlayerNow = (playerNow) => {\n            this.context.clearRect(this.HEIGHT, 0, this.HEIGHT * this.NAME_LIMIT, this.canvas.height);\n            this.context.lineWidth = 1;\n            this.context.strokeStyle = '#ffffff';\n            this.context.font = this.HEIGHT + 'px Oxanium';\n            for (let i = 0; i < this.PLAYER_NUM; ++i) {\n                this.context.fillStyle = 'black';\n                if (i == playerNow)\n                    this.context.fillStyle = 'red';\n                this.context.fillText(this.PLAYER_NAME[i], this.HEIGHT, (i + 1) * this.HEIGHT, this.HEIGHT * this.NAME_LIMIT);\n            }\n        };\n        this.canvas = document.getElementById(_canvas);\n        this.context = this.canvas.getContext('2d');\n    }\n}\n;\n\n\n//# sourceURL=webpack:///./src/DrawPlayer.ts?");

/***/ }),

/***/ "./src/Server.ts":
/*!***********************!*\
  !*** ./src/Server.ts ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Server; });\n/* harmony import */ var _Dice__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Dice */ \"./src/Dice.ts\");\n/* harmony import */ var _Sleep__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Sleep */ \"./src/Sleep.ts\");\n/* harmony import */ var firebase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase */ \"firebase\");\n/* harmony import */ var firebase__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(firebase__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var numeral__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! numeral */ \"numeral\");\n/* harmony import */ var numeral__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(numeral__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nconst db = firebase__WEBPACK_IMPORTED_MODULE_2__[\"database\"]();\nconst PATH = 'CamelUp/';\nclass Server {\n    constructor(CAMEL_NUM = 5, BOARD_SIZE = 16, MOVE_NUM = 3, POINT_INIT = 3) {\n        this.CAMEL_NUM = CAMEL_NUM;\n        this.BOARD_SIZE = BOARD_SIZE;\n        this.MOVE_NUM = MOVE_NUM;\n        this.POINT_INIT = POINT_INIT;\n        this.shuffle = (arr) => {\n            for (let i = arr.length - 1; i > 0; i = 0 | i - 1) {\n                const j = 0 | Math.random() * (i + 1);\n                const swap = arr[i];\n                arr[i] = arr[j];\n                arr[j] = swap;\n            }\n        };\n        this.randomStart = () => {\n            for (let id = 0; id < this.CAMEL_NUM; ++id) {\n                this.MoveForward(id, this.dice.roll().move);\n            }\n            this.dice.init();\n        };\n        this.MoveForward = (id, move) => {\n            // 前座標取得\n            const px = this.camel.x[id];\n            const py = this.camel.y[id];\n            // 移動するラクダ数をカウント\n            let num = 0;\n            for (let dy = 0;; ++dy) {\n                const ny = py - dy;\n                if (ny == 0)\n                    break;\n                if (this.board[px][ny] != null) {\n                    ++num;\n                }\n            }\n            // 次座標の計算\n            let nx = px + move;\n            let endFlg = false;\n            if (nx > this.BOARD_SIZE) {\n                nx = this.BOARD_SIZE + 1;\n                endFlg = true;\n            }\n            let ny = 0;\n            for (let y = this.CAMEL_NUM; y > 0; --y) {\n                if (this.board[nx][y] == null) {\n                    ny = y;\n                    break;\n                }\n            }\n            // 次座標へのプロットと前座標の削除\n            for (let dy = 0; dy < num; ++dy) {\n                const id = this.board[px][py - dy];\n                this.camel.x[id] = nx;\n                this.camel.y[id] = ny - dy;\n                this.board[nx][ny - dy] = this.board[px][py - dy];\n                this.board[px][py - dy] = null;\n            }\n            return endFlg;\n        };\n        this.MoveBackward = (id, move) => {\n            // 前座標取得\n            const px = this.camel.x[id];\n            const py = this.camel.y[id];\n            // 移動するラクダ数をカウント\n            let num = 0;\n            for (let dy = 0;; ++dy) {\n                const ny = py - dy;\n                if (ny == 0)\n                    break;\n                if (this.board[px][ny] != null) {\n                    ++num;\n                }\n            }\n            // 次座標の計算\n            let nx = px - move;\n            if (nx < 0) {\n                nx = 0;\n            }\n            // 次座標のラクダをyスライド\n            for (let y = 1; y <= this.CAMEL_NUM; ++y) {\n                const id = this.board[nx][y];\n                if (id != null) {\n                    this.camel.y[id] -= num;\n                    this.board[nx][y - num] = this.board[nx][y];\n                    this.board[nx][y] = null;\n                }\n            }\n            // 次座標へのプロットと前座標の削除\n            for (let dy = 0; dy < num; ++dy) {\n                const id = this.board[px][py - dy];\n                this.camel.x[id] = nx;\n                this.camel.y[id] = this.CAMEL_NUM - dy;\n                this.board[nx][this.CAMEL_NUM - dy] = this.board[px][py - dy];\n                this.board[px][py - dy] = null;\n            }\n        };\n        this.getCamelRank = () => {\n            const ret = new Array(this.CAMEL_NUM);\n            let rank = 1;\n            for (let x = this.BOARD_SIZE + 1; x > 0; --x) {\n                for (let y = 1; y <= this.CAMEL_NUM; ++y) {\n                    const id = this.board[x][y];\n                    if (id != null) {\n                        ret[id] = rank;\n                        ++rank;\n                    }\n                }\n            }\n            return ret;\n        };\n        this.getPlayerRank = () => {\n            const arr = new Array(this.PLAYER_NUM);\n            for (let i = 0; i < this.PLAYER_NUM; ++i) {\n                arr[i] = { point: this.playerPoint[i], player: i };\n            }\n            arr.sort((lhs, rhs) => {\n                if (lhs.point < rhs.point)\n                    return 1;\n                return 0;\n            });\n            const ret = new Array(this.PLAYER_NUM);\n            for (let i = 0; i < this.PLAYER_NUM; ++i) {\n                ret[i] = arr[i].player;\n            }\n            return ret;\n        };\n        this.PointCalc = async () => {\n            this.running('Point Calc');\n            const rank = this.getCamelRank();\n            await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n            for (let i = 0; i < this.PLAYER_NUM; ++i) {\n                const pre = this.playerPoint[i];\n                let diff = 0;\n                while (this.playerCamel[i].length) {\n                    const { color, pt } = this.playerCamel[i].shift();\n                    if (color == -1) {\n                        diff += 1;\n                    }\n                    else {\n                        if (rank[color] == 1) {\n                            diff += pt;\n                        }\n                        else if (rank[color] == 2) {\n                            diff += 1;\n                        }\n                        else {\n                            diff += -1;\n                        }\n                    }\n                }\n                this.playerPoint[i] += diff;\n                this.running(this.PLAYER_NAME[i] + ': ' + pre + 'pt -> ' + this.playerPoint[i] + 'pt');\n                await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n            }\n            db.ref(PATH + 'player/point').set(this.playerPoint);\n        };\n        this.finish = async () => {\n            await this.PointCalc();\n            await this.FinalCalc();\n            await this.Result();\n        };\n        this.Result = async () => {\n            this.running('Result');\n            await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n            const player = this.getPlayerRank();\n            for (let rank = this.PLAYER_NUM - 1; rank >= 0; --rank) {\n                db.ref(PATH + 'player/rank/' + player[rank].toString()).set(rank + 1);\n                const str = numeral__WEBPACK_IMPORTED_MODULE_3__(rank + 1).format('0o') + ': ' + this.PLAYER_NAME[player[rank]];\n                this.running(str);\n                await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n            }\n            this.running('Press Start');\n        };\n        this.FinalCalc = async () => {\n            this.running('Final Calc');\n            const point = [8, 5, 3, 2, 1, 1, 1, 1, 1, 1, 1];\n            const rank = this.getCamelRank();\n            await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n            {\n                this.running('Last');\n                const pt = point.concat();\n                await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n                while (this.finalBetCamel[1].length) {\n                    const { player, color } = this.finalBetCamel[1].shift();\n                    this.running('Last: ' + this.PLAYER_NAME[player] + ' bet on');\n                    await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n                    this.running('Last: ' + this.PLAYER_NAME[player] + ' bet on ' + color);\n                    const pre = this.playerPoint[player];\n                    if (rank[color] == this.CAMEL_NUM) {\n                        this.playerPoint[player] += pt.shift();\n                    }\n                    else {\n                        this.playerPoint[player] += -1;\n                    }\n                    await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n                    this.running(this.PLAYER_NAME[player] + ': ' + pre + 'pt -> ' + this.playerPoint[player] + 'pt');\n                    db.ref(PATH + 'player/point').set(this.playerPoint);\n                    await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n                }\n            }\n            {\n                this.running('Top');\n                const pt = point.concat();\n                await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n                while (this.finalBetCamel[0].length) {\n                    const { player, color } = this.finalBetCamel[0].shift();\n                    this.running('Top: ' + this.PLAYER_NAME[player] + ' bet on');\n                    await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n                    this.running('Top: ' + this.PLAYER_NAME[player] + ' bet on ' + color);\n                    const pre = this.playerPoint[player];\n                    if (rank[color] == 1) {\n                        this.playerPoint[player] += pt.shift();\n                    }\n                    else {\n                        this.playerPoint[player] += -1;\n                    }\n                    await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n                    this.running(this.PLAYER_NAME[player] + ': ' + pre + 'pt -> ' + this.playerPoint[player] + 'pt');\n                    db.ref(PATH + 'player/point').set(this.playerPoint);\n                    await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n                }\n            }\n        };\n        this.PanelReset = () => {\n            this.panel = new Array(this.BOARD_SIZE + 1);\n            this.panelPlayer = new Array(this.BOARD_SIZE + 1);\n            for (let x = 0; x < this.BOARD_SIZE + 1; ++x) {\n                this.panel[x] = null;\n                this.panelPlayer[x] = null;\n            }\n            this.playerPanel = { x: new Array(this.PLAYER_NUM), move: new Array(this.PLAYER_NUM) };\n            for (let i = 0; i < this.PLAYER_NUM; ++i) {\n                this.playerPanel.x[i] = null;\n                this.playerPanel.move[i] = null;\n            }\n            db.ref('CamelUp/grid').set(this.playerPanel);\n        };\n        this.BetReset = () => {\n            this.playerCamel = new Array(this.PLAYER_NUM);\n            for (let i = 0; i < this.PLAYER_NUM; ++i) {\n                this.playerCamel[i] = new Array(0);\n            }\n            this.betCamel = new Array(this.CAMEL_NUM);\n            const bet = [5, 3, 2];\n            for (let i = 0; i < this.CAMEL_NUM; ++i) {\n                this.betCamel[i] = bet.concat();\n            }\n        };\n        this.init = (PLAYER_NAME) => {\n            console.log('Init');\n            this.PLAYER_NUM = PLAYER_NAME.length;\n            this.PLAYER_NAME = PLAYER_NAME;\n            console.log(this.PLAYER_NAME);\n            this.dice = new _Dice__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.CAMEL_NUM, this.MOVE_NUM);\n            this.board = new Array(this.BOARD_SIZE + 2);\n            for (let x = 0; x < this.BOARD_SIZE + 2; ++x) {\n                this.board[x] = new Array(this.CAMEL_NUM + 1);\n                for (let y = 0; y < this.CAMEL_NUM + 1; ++y) {\n                    this.board[x][y] = null;\n                }\n            }\n            this.camel = { x: new Array(this.CAMEL_NUM), y: new Array(this.CAMEL_NUM) };\n            for (let i = 0; i < this.CAMEL_NUM; ++i) {\n                this.camel.x[i] = 0;\n                this.camel.y[i] = i + 1;\n                this.board[0][i + 1] = i;\n            }\n            this.PanelReset();\n            this.playerPoint = new Array(this.PLAYER_NUM);\n            for (let i = 0; i < this.PLAYER_NUM; ++i) {\n                this.playerPoint[i] = this.POINT_INIT;\n            }\n            this.playerNow = -1;\n            this.playerToken = 0;\n            this.BetReset();\n            this.finalBetCamel = new Array(2);\n            for (let i = 0; i < 2; ++i) {\n                this.finalBetCamel[i] = new Array(0);\n            }\n            this.playerFinalBet = new Array(this.CAMEL_NUM);\n            for (let i = 0; i < this.CAMEL_NUM; ++i) {\n                this.playerFinalBet[i] = false;\n            }\n        };\n        this.running = (action) => {\n            console.log(action);\n            db.ref(PATH + 'announce/').set(action);\n        };\n        this.playerRunning = (action) => {\n            const str = this.PLAYER_NAME[this.playerNow] + ': ' + action;\n            console.log(str);\n            db.ref(PATH + 'announce/').set(str);\n        };\n        this.playerNext = () => {\n            ++this.playerNow;\n            this.playerNow %= this.PLAYER_NUM;\n            db.ref(PATH + 'player/now').set(this.playerNow);\n            const str = this.PLAYER_NAME[this.playerNow] + ': thinking';\n            console.log(str);\n            db.ref(PATH + 'announce/').set(str);\n        };\n        this.playerNextToken = async () => {\n            ++this.playerToken;\n            this.playerToken %= this.PLAYER_NUM;\n            this.playerNow = this.playerToken;\n            this.BetReset();\n            db.ref(PATH + 'announce/').set('New Leg Start');\n            console.log('New Leg Start');\n            db.ref(PATH + 'player/token').set(this.playerToken);\n            db.ref(PATH + 'player/now').set(this.playerNow);\n            this.PanelReset();\n            await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n            const str = this.PLAYER_NAME[this.playerNow] + ': thinking';\n            console.log(str);\n            db.ref(PATH + 'announce/').set(str);\n        };\n        this.start = async (PLAYER_NAME) => {\n            this.init(PLAYER_NAME);\n            db.ref(PATH + 'camel/').set(this.camel);\n            db.ref(PATH + 'dice/').set(this.dice.status());\n            db.ref(PATH + 'grid/').set(this.playerPanel);\n            db.ref(PATH + 'player/').set({ name: this.PLAYER_NAME });\n            this.running('Start');\n            await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n            this.running(\"Shuffle Players\");\n            this.shuffle(this.PLAYER_NAME);\n            db.ref(PATH + 'player/').set({\n                name: this.PLAYER_NAME,\n                point: this.playerPoint,\n                token: this.playerToken,\n                now: this.playerNow\n            });\n            console.log(this.PLAYER_NAME);\n            await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n            this.running(\"Set Camels\");\n            this.randomStart();\n            db.ref(PATH + 'camel/').set(this.camel);\n            console.log(this.camel);\n            await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n            this.playerNext();\n        };\n        this.DiceRoll = async () => {\n            this.playerRunning('Dice');\n            const { color, move, endFlg } = this.dice.roll();\n            this.playerCamel[this.playerNow].push({ color: -1, pt: 1 });\n            db.ref(PATH + 'dice/').set(this.dice.status());\n            console.log('Camel: ' + color + ', Move: ' + move);\n            if (this.MoveForward(color, move)) {\n                db.ref(PATH + 'camel/').set(this.camel);\n                this.finish();\n                return;\n            }\n            db.ref(PATH + 'camel/').set(this.camel);\n            const panel = this.panel[this.camel.x[color]];\n            if (panel > 0) {\n                await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(1000);\n                console.log('Get Oasis');\n                this.playerCamel[this.panelPlayer[this.camel.x[color]]].push({ color: -1, pt: 1 });\n                this.MoveForward(color, panel);\n            }\n            if (panel < 0) {\n                await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(1000);\n                console.log('Get Mirage');\n                this.playerCamel[this.panelPlayer[this.camel.x[color]]].push({ color: -1, pt: 1 });\n                this.MoveBackward(color, -panel);\n            }\n            db.ref(PATH + 'camel/').set(this.camel);\n            await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n            if (endFlg) {\n                await this.PointCalc();\n                await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n                this.dice.init();\n                db.ref(PATH + 'dice/').set(this.dice.status());\n                this.playerNextToken();\n            }\n            else {\n                this.playerNext();\n            }\n        };\n        this.Bet = async (color) => {\n            const pt = this.betCamel[color].shift();\n            if (pt == undefined)\n                throw 'You can\\'t bet on this camel.';\n            this.playerRunning('Bet on ' + color.toString());\n            this.playerCamel[this.playerNow].push({ color: color, pt: pt });\n            await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n            this.playerNext();\n        };\n        this.PanelSet = async (x, move) => {\n            const px = this.playerPanel.x[this.playerNow];\n            const pmove = this.playerPanel.move[this.playerNow];\n            this.panel[px] = null;\n            if (x < 2 || this.BOARD_SIZE < x)\n                throw 'You can\\'t place here.';\n            let able = true;\n            if (this.panel[x] != null)\n                able = false;\n            if (this.board[x][this.CAMEL_NUM] != null)\n                able = false;\n            if (this.panel[x - 1] != null)\n                able = false;\n            if (this.panel[x + 1] != null)\n                able = false;\n            if (!able) {\n                this.playerPanel.x[this.playerNow] = px;\n                this.playerPanel.move[this.playerNow] = pmove;\n                this.panel[px] = pmove;\n                throw 'You can\\'t place here.';\n            }\n            this.playerRunning('Panel');\n            this.playerPanel.x[this.playerNow] = x;\n            this.playerPanel.move[this.playerNow] = move;\n            this.panel[x] = move;\n            this.panelPlayer[x] = this.playerNow;\n            db.ref('CamelUp/grid').set(this.playerPanel);\n            await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n            this.playerNext();\n        };\n        this.FinalBet = async (color, stat) => {\n            if (this.playerFinalBet[this.playerNow][color])\n                throw 'You can\\'t bet on this camel.';\n            this.playerRunning('FinalBet for ' + (stat == 0 ? 'Top' : 'Last'));\n            this.finalBetCamel[stat].push({ player: this.playerNow, color: color });\n            await Object(_Sleep__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(2000);\n            this.playerNext();\n        };\n    }\n    ;\n}\n;\n\n\n//# sourceURL=webpack:///./src/Server.ts?");

/***/ }),

/***/ "./src/Sleep.ts":
/*!**********************!*\
  !*** ./src/Sleep.ts ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Sleep; });\nfunction Sleep(time) {\n    return new Promise((res, _rej) => {\n        // debug\n        // window.setTimeout(res, 10);\n        window.setTimeout(res, time);\n    });\n}\n;\n\n\n//# sourceURL=webpack:///./src/Sleep.ts?");

/***/ }),

/***/ "firebase":
/*!***************************!*\
  !*** external "firebase" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = firebase;\n\n//# sourceURL=webpack:///external_%22firebase%22?");

/***/ }),

/***/ "numeral":
/*!**************************!*\
  !*** external "numeral" ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = numeral;\n\n//# sourceURL=webpack:///external_%22numeral%22?");

/***/ })

/******/ });